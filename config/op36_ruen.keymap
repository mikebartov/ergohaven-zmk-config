#include "keys_ru.h"
#include "keys_ru.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    quick-tap-ms = <200>;
    flavor = "tap-preferred";
    require-prior-idle-ms = <125>;
};

/ {
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            hold-trigger-on-release;
        };
    };

    combos {
        compatible = "zmk,combos";

        cmben {
            bindings = <&layer_en>;
            key-positions = <22 23>;
            layers = <1>;
        };

        cmbru {
            bindings = <&layer_ru>;
            key-positions = <26 27>;
            layers = <0>;
        };
    };

    macros {
        to_ru: to_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(N2))>;
            label = "TO_RU";
            wait-ms = <0>;
            tap-ms = <30>;
        };

        to_en: to_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(N1))>;
            label = "TO_EN";
            wait-ms = <0>;
            tap-ms = <30>;
        };

        layer_en: layer_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 0 &to_en>;
            label = "LAYER_EN";
            wait-ms = <0>;
            tap-ms = <30>;
        };

        layer_ru: layer_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 1 &to_ru>;
            label = "LAYER_RU";
            tap-ms = <30>;
            wait-ms = <0>;
        };

        en: en {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&to_en>,
                <&macro_press>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&to_ru>;

            label = "EN";
            wait-ms = <0>;
            tap-ms = <30>;
        };

        ru: ru {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&to_ru>,
                <&macro_press>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&to_en>;

            label = "RU";
            wait-ms = <0>;
            tap-ms = <30>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        en {
            bindings = <
  &kp Q        &kp W         &kp E        &kp R          &kp T                                   &kp Y      &kp U          &kp I        &kp O         &kp P
  &hml LGUI A  &hml LCTRL S  &hml LALT D  &hml LSHIFT F  &kp G                                   &kp H      &hmr RSHIFT J  &hmr RALT K  &hmr RCTRL L  &hmr RGUI SEMICOLON
  &mt LG(Z) Z  &mt LG(X) X   &mt LG(C) C  &mt LG(V) V    &kp B                                   &kp N      &kp M          &none        &none         &none
                                          &lt 9 TAB      &lt 4 ENTER  &lt 3 SPACE    &lt 8 BSPC  &lt 6 ESC  &lt 9 DELETE
            >;

            display-name = "EN";
        };

        ru {
            bindings = <
  &kp RU_CYRILLIC_SHORT_I   &kp RU_CYRILLIC_TSE          &kp RU_CYRILLIC_U         &kp RU_CYRILLIC_KA         &mt RU_CYRILLIC_IO RU_CYRILLIC_IE                             &kp RU_CYRILLIC_EN  &kp RU_CYRILLIC_GHE                              &mt RU_CYRILLIC_SHCHA RU_CYRILLIC_SHA  &kp RU_CYRILLIC_ZE         &kp RU_CYRILLIC_HA
  &hml LGUI RU_CYRILLIC_EF  &hml LCTRL RU_CYRILLIC_YERU  &hml LALT RU_CYRILLIC_VE  &hml LSHIFT RU_CYRILLIC_A  &kp RU_CYRILLIC_PE                                            &kp RU_CYRILLIC_ER  &hmr RSHIFT RU_CYRILLIC_O                        &hmr RALT RU_CYRILLIC_EL               &hmr RCTRL RU_CYRILLIC_DE  &hmr RGUI RU_CYRILLIC_ZHE
  &mt LG(Z) RU_CYRILLIC_YA  &mt LG(X) RU_CYRILLIC_CHE    &mt LG(C) RU_CYRILLIC_ES  &mt LG(V) RU_CYRILLIC_EM   &kp RU_CYRILLIC_I                                             &kp RU_CYRILLIC_TE  &mt RU_CYRILLIC_HARD_SIGN RU_CYRILLIC_SOFT_SIGN  &kp RU_CYRILLIC_BE                     &kp RU_CYRILLIC_YU         &kp RU_CYRILLIC_E
                                                                                   &lt 9 TAB                  &lt 5 ENTER                        &lt 2 SPACE    &lt 8 BSPC  &lt 7 ESC           &lt 9 DEL
            >;

            display-name = "RU";
        };

        sym_en {
            bindings = <
  &kp AT            &kp SINGLE_QUOTE   &kp LEFT_BRACE  &kp RIGHT_BRACE   &kp GRAVE                            &kp CARET  &kp HASH   &kp DOLLAR  &kp AMPS       &kp PIPE
  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LPAR        &kp RPAR          &kp SEMI                             &kp COLON  &kp EXCL   &kp MINUS   &kp QUESTION   &kp EQUAL
  &kp LT            &kp GT             &ru LA(SEMI)    &ru LS(LA(SEMI))  &kp DOUBLE_QUOTES                    &kp ASTRK  &kp SLASH  &kp UNDER   &kp BACKSLASH  &kp TILDE
                                                       &ru LS(LA(N8))    &ru LA(H)          &trans    &trans  &kp DOT    &kp PRCNT
            >;

            display-name = "SYM";
        };

        sym_ru {
            display-name = "SYM";
            bindings = <
  &en AT            &en SINGLE_QUOTE   &kp LEFT_BRACE  &kp RIGHT_BRACE   &kp GRAVE                            &en CARET     &en HASH      &en DOLLAR    &en AMPS          &en PIPE
  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp RU_LPAR     &kp RU_RPAR       &kp RU_SEMI                          &kp RU_COLON  &kp RU_EXCL   &kp RU_MINUS  &kp RU_QUESTION   &kp RU_EQUAL
  &en LT            &en GT             &kp LA(SEMI)    &kp LS(LA(SEMI))  &kp DOUBLE_QUOTES                    &kp RU_ASTRK  &kp RU_SLASH  &kp RU_UNDER  &kp RU_BACKSLASH  &en TILDE
                                                       &kp LS(LA(N8))    &kp LA(H)          &trans    &trans  &kp DOT       &kp PRCNT
            >;
        };

        num_en {
            bindings = <
  &trans                 &trans                 &kp LS(LA(LC(LG(E))))  &kp LS(LA(LC(LG(R))))  &kp LS(LA(LC(LG(T))))                       &kp PLUS   &kp N7     &kp N8  &kp N9  &trans
  &kp LS(LA(LC(LG(Z))))  &kp LS(LA(LC(LG(D))))  &kp LS(LA(LC(LG(F))))  &kp LS(LA(LC(LG(B))))  &kp LS(LA(LC(LG(G))))                       &kp MINUS  &kp N4     &kp N5  &kp N6  &kp N0
  &kp LS(LA(LC(LG(N))))  &kp LS(LA(LC(LG(K))))  &kp LS(LA(LC(LG(A))))  &kp LS(LA(LC(LG(I))))  &kp LS(LA(LC(LG(M))))                       &kp ASTRK  &kp N1     &kp N2  &kp N3  &kp SLASH
                                                                       &kp LS(LA(LC(LG(S))))  &trans                 &trans    &kp COMMA  &kp DOT    &kp PRCNT
            >;

            label = "NUM";
        };

        num_ru {
            bindings = <
  &trans                 &trans                 &kp LS(LA(LC(LG(E))))  &kp LS(LA(LC(LG(R))))  &kp LS(LA(LC(LG(T))))                          &kp PLUS    &kp N7        &kp N8  &kp N9  &trans
  &kp LS(LA(LC(LG(Z))))  &kp LS(LA(LC(LG(D))))  &kp LS(LA(LC(LG(F))))  &kp LS(LA(LC(LG(B))))  &kp LS(LA(LC(LG(G))))                          &kp MINUS   &kp N4        &kp N5  &kp N6  &kp N0
  &kp LS(LA(LC(LG(N))))  &kp LS(LA(LC(LG(K))))  &kp LS(LA(LC(LG(A))))  &kp LS(LA(LC(LG(I))))  &kp LS(LA(LC(LG(M))))                          &kp ASTRK   &kp N1        &kp N2  &kp N3  &kp RU_SLASH
                                                                       &kp LS(LA(LC(LG(S))))  &trans                 &trans    &kp RU_COMMA  &kp RU_DOT  &kp RU_PRCNT
            >;

            label = "NUM";
        };

        macro_en {
            bindings = <
  &trans  &trans  &trans  &trans     &trans                                  &kp LA(LG(N6))     &kp LA(LG(N7))  &kp LA(LG(N8))     &kp LG(O)           &kp LG(P)
  &trans  &trans  &trans  &kp K_APP  &trans                                  &kp LA(LC(LG(M)))  &kp LS(F3)      &kp LA(LC(LG(Z)))  &kp LA(LC(LG(N2)))  &kp LA(LC(LG(S)))
  &trans  &trans  &trans  &trans     &trans                                  &trans             &kp LA(LC(A))   &trans             &trans              &kp LA(LC(LG(G)))
                          &kp F1     &kp LG(ENTER)  &kp LA(MINUS)    &trans  &trans             &kp LC(LG(C))
            >;

            label = "HOT";
        };

        macro_ru {
            bindings = <
  &trans  &trans  &trans  &trans     &trans                                  &kp LA(LG(N6))     &kp LA(LG(N7))  &kp LA(LG(N8))     &kp LG(O)           &kp LG(P)
  &trans  &trans  &trans  &kp K_APP  &trans                                  &kp LA(LC(LG(M)))  &kp LS(F3)      &en LA(LC(LG(Z)))  &en LA(LC(LG(N2)))  &en LA(LC(LG(S)))
  &trans  &trans  &trans  &trans     &trans                                  &trans             &kp LA(LC(A))   &trans             &trans              &en LA(LC(LG(G)))
                          &kp F1     &kp LG(ENTER)  &kp LA(MINUS)    &trans  &trans             &kp LC(LG(C))
            >;

            label = "HOT";
        };

        nav {
            bindings = <
  &trans    &trans               &trans            &trans                &trans                        &trans        &trans          &kp UP        &trans     &trans
  &kp LCMD  &hml LCTRL C_VOL_DN  &hml LALT K_MUTE  &hml LSHIFT C_VOL_UP  &trans                        &kp LA(LEFT)  &kp LEFT        &kp DOWN      &kp RIGHT  &kp LA(RIGHT)
  &trans    &mt LG(X) K_PREV     &mt LG(C) K_PP    &mt LG(V) K_NEXT      &trans                        &kp HOME      &msc SCRL_DOWN  &msc SCRL_UP  &trans     &kp END
                                                   &trans                &mkp MB2  &mkp MB1    &trans  &trans        &trans
            >;

            display-name = "NAV";
        };

        wind_man {
            bindings = <
  &trans                &trans                         &trans           &trans         &trans                    &kp LG(MINUS)  &kp LS(LA(LG(W)))  &kp LS(LA(LG(E)))  &kp LS(LA(LG(R)))  &trans
  &kp LG(LEFT_BRACKET)  &kp LG(RIGHT_BRACKET)          &kp LS(LC(TAB))  &kp LC(TAB)    &trans                    &kp LG(EQUAL)  &kp LS(LA(LG(S)))  &kp LS(LA(LG(D)))  &kp LS(LA(LG(F)))  &kp LS(LA(LG(G)))
  &trans                &kp LS(LA(LG(RIGHT_BRACKET)))  &kp LS(LG(C))    &kp LA(LG(C))  &trans                    &kp LG(N0)     &kp LS(LA(LG(X)))  &kp LS(LA(LG(C)))  &kp LS(LA(LG(V)))  &trans
                                                                        &trans         &trans  &trans    &trans  &trans         &trans
            >;

            label = "WM";
        };

        extra {
            bindings = <
  &trans  &trans  &kp LA(LS(N4))  &kp RU_RUBLE  &trans                    &kp F23  &kp F7  &kp F8  &kp F9  &trans
  &trans  &trans  &trans          &trans        &trans                    &kp F24  &kp F4  &kp F5  &kp F6  &trans
  &trans  &trans  &trans          &trans        &trans                    &trans   &kp F1  &kp F2  &kp F3  &trans
                                  &trans        &trans  &trans    &trans  &trans   &trans
            >;

            display-name = "EXT";
        };
    };
};
